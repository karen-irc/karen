{
    "rules": {
        "adjacent-overload-signatures": true,
        "array-type": false,
        "arrow-parens": true,
        "arrow-return-shorthand": false,
        "ban-types": [true],
        "callable-types": true,
        "class-name": true,
        "completed-docs": false,
        "curly": true,
        "cyclomatic-complexity": false, // This is meaningless for daily working.
        "encoding": true, // Enforce all files should be utf-8.
        "file-header": false,
        "import-blacklist": [true],
        "import-spacing": true,
        "indent": [true, "spaces", 4],
        "interface-over-type-literal": false,
        "linebreak-style": [true, "LF"],
        "max-classes-per-file": false,
        "max-file-line-count": false, // This is meaningless today.
        "member-ordering": [true, "variables-before-functions"],
        "new-parens": true,
        "newline-before-return": false,
        "no-angle-bracket-type-assertion": true,
        "no-any": true, // Please opt-out this rule if you'd like to use this rule.
        "no-arg": true,
        "no-conditional-assignment": true,
        "no-construct": true,
        "no-default-export": true,
        "no-duplicate-super": true,
        "no-duplicate-variable": true,
        "no-empty-interface": false,
        "no-eval": true,
        "no-import-side-effect": false,
        "no-internal-module": true,
        "no-invalid-template-strings": true,
        "no-invalid-this": true,
        "no-irregular-whitespace": true,
        "no-magic-numbers": false,
        "no-mergeable-namespace": true,
        "no-misused-new": true,
        "no-namespace": [true, "allow-declarations"],
        "no-non-null-assertion": true, // Please opt-out this rule if you'd like to use this rule.
        "no-object-literal-type-assertion": true,

        // This TypeScript syntax is useful to reduce declarations of class properties.
        // However, we feel this syntax has these negative points:
        //  * This is not a part of ECMA262 standards.
        //  * This makes the ordering of initializing members unclear.
        // By these things, we enables this rule as defensive choice.
        "no-parameter-properties": true,

        "no-require-imports": true,
        "no-reference-import": true,
        "no-sparse-arrays": true,
        "no-string-literal": true, // You should not disable this at global easily.
        "no-string-throw": true,
        "no-switch-case-fall-through": true,
        "no-trailing-whitespace": true,
        "no-unnecessary-initializer": true,
        "no-unnecessary-callback-wrapper": true,
        "no-unsafe-finally": true,
        "no-unused-expression": [true, "allow-fast-null-checks"],
        "no-var-keyword": true,
        "no-var-requires": true,
        "number-literal-format": true,
        "object-literal-key-quotes": [true, "as-needed"],
        "object-literal-shorthand": false,
        "object-literal-sort-keys": false, // We don't think it is important.
        "one-variable-per-declaration": [true, "ignore-for-loop"],
        "only-arrow-functions": false,
        "prefer-conditional-expression": false,
        "prefer-const": true, // Sort with ESLint
        "prefer-for-of": true,
        "prefer-function-over-method": false,
        "prefer-method-signature": false,
        "prefer-object-spread": false, // We don't have any opinion to it...
        "prefer-switch": false,
        "prefer-template": false, // Sort with ESLint
        "quotemark": [true, "single", "jsx-single", "avoid-escape"], // Sort with ESLint
        "radix": true,
        "semicolon": [true, "always"],
        "space-before-function-paren": [true, {
            "named": "never"
        }],
        "triple-equals": true,
        "typeof-compare": true,
        "unified-signatures": false,
        "use-isnan": true,
        "variable-name": [true,
            "check-format",
                "allow-leading-underscore",
                "allow-pascal-case",
            "ban-keywords"
        ]
    }
}
